{
    "project": {
        "name": "The Hypo API",
        "description": "The Hypo API: Dependency injection for JavaScript",
        "version": "0.1.0"
    },
    "files": {
        "lib\\hypo.js": {
            "name": "lib\\hypo.js",
            "modules": {},
            "classes": {
                "Hypo": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Hypo": {
            "name": "Hypo",
            "shortname": "Hypo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib\\hypo.js",
            "line": 5,
            "description": "Hypo dependency injection framework constructor.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "definitions",
                    "description": "An object that defines the entities\nand their dependencies to be managed by this Hypo instance. See\nreadme for a full example of a hypo configuration object.",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib\\hypo.js",
            "line": 15,
            "description": "The entity definition object for this Hypo instance.",
            "itemtype": "property",
            "name": "definitions",
            "type": "{object}",
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 22,
            "description": "A map of all singleton entities managed by this instance.",
            "itemtype": "property",
            "name": "singletonMap",
            "type": "{object}",
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 33,
            "description": "Generates the non-lazy singleton entities managed by this instance.\nThis method is called when the hypo instance is constructed, and does\nnot need to be called again.",
            "itemtype": "method",
            "name": "generateSingletons",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 50,
            "description": "The method for retrieving entities.  If an entity is a singleton\nand not particularly lazy, it will have been created along with\nthe Hypo instance.  Otherwise, it will be created the first time\nit is requested in the case of lazy singletons, and each time in\nthe case of transient entities.",
            "itemtype": "method",
            "name": "getEntity",
            "params": [
                {
                    "name": "name",
                    "description": "Corresponds to the key in definitions\nrepresenting the entity definition to retieve an instance of.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The entity instance generated from the definition\ncorresponding with the passed name.",
                "type": "Object"
            },
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 93,
            "description": "Creates a new object using the passed constructor function and\nargument property definitions.  See parseProperty for a description\nof appropriate Hypo property definitions.",
            "itemtype": "method",
            "name": "createEntity",
            "params": [
                {
                    "name": "ctor",
                    "description": "The constructor function to be\ninvoked with the parsed argument definitions.",
                    "type": "Function"
                },
                {
                    "name": "argDefs",
                    "description": "An array of Hypo property definitions",
                    "type": "Array"
                },
                {
                    "name": "entityName",
                    "description": "The name of the entity being constructed;\nused to check for circular dependencies.",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context in which to call the constructor;\nused when applying factory methods.",
                    "type": "Object"
                }
            ],
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 149,
            "description": "Applies properties to an entity instance based on the passed set of\nproperty definitions.  See parseProperty for a description of\nappropriate Hypo property definitions.",
            "itemtype": "method",
            "name": "applyProperties",
            "params": [
                {
                    "name": "entity",
                    "description": "An entity instance to apply the parsed properties to.",
                    "type": "Object"
                },
                {
                    "name": "propertyDefinitions",
                    "description": "An object with keys corresponding to\nthe properties to be applied to the entity, and Hypo property definition\nvalues.",
                    "type": "Object"
                }
            ],
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 166,
            "description": "Parses Hypo property definitions.  These definitions are used for\nconstructor arguments, factory arguments, and property definitions.\nValid property objects are as follows:",
            "example": [
                "\nPassing an object with a hypo key returns a reference to the Hypo instance\n\n    {\n        hypo : true    \n    }\n      \nPassing an object with an entity key equal to an entity name returns an entity\ninstance.\n\n    {\n        entity : \"entity name\"\n    }\n      \nPassing an object with a key \"value\" returns that value.\n\n    {\n        value : \"object or primitive value\"\n    }\n      \nAny other object configuration will result in an error being thrown."
            ],
            "itemtype": "method",
            "name": "parseProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "A valid Hypo property definition",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An entity, hypo instance, or value based on the passed property"
            },
            "class": "Hypo"
        },
        {
            "file": "lib\\hypo.js",
            "line": 213,
            "description": "Parses the definition for the passed name, including recursing through\nany parent definitions, and merging parent and child properties where\nneeded.",
            "itemtype": "method",
            "name": "parseDefinition",
            "params": [
                {
                    "name": "name",
                    "description": "Then entity name to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed definition",
                "type": "Object"
            },
            "class": "Hypo"
        }
    ]
}