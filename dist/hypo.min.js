/**
 * Hypo - Dependency injection for JavaScript.  Simple and to the point.
 *
 * copyright: (c) 2012 by Ryan Lynch
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
!function(define){define("Hypo",function(){var Hypo=function(definitions){this.definitions=definitions,this.singletonMap={},this.generateSingletons()};return Hypo.prototype={generateSingletons:function(){var def;for(var name in this.definitions)this.definitions.hasOwnProperty(name)&&(def=this.definitions[name],!def.transient&&!def.lazy&&!def.abstract&&this.getEntity(name))},getEntity:function(name){var def=this.parseDefinition(name),parentDef,entity,args,i,ctor,context;if(def.abstract)throw'Hypo Error: "'+name+'" is an abstract entity, and cannot be retrieved.';if(!def.transient&&this.singletonMap[name])entity=this.singletonMap[name];else{if(def.ctor)ctor=def.ctor,args=def.ctorArgs;else{if(!def.factory)throw'Hypo Error: Non-abstract entity "'+name+'" must have a ctor or factory defined.';context=typeof def.factory.context=="string"?this.getEntity(def.factory.context):def.factory.context,ctor=context[def.factory.method],args=def.factory.args}entity=this.createEntity(ctor,args,name,context),def.transient||(this.singletonMap[name]=entity),this.applyProperties(entity,def.props)}return entity},createEntity:function(ctor,argDefs,entityName,context){var entity=function(){},args=[],entityDef,ret,inst,i,j;if(typeof ctor!="function")throw'Hypo Error: Invalid ctor or factory method for "'+entityName+'".';if(argDefs)for(i=0;i<argDefs.length;i++){if(argDefs[i].entity){var depError=new Error('Hypo Error: Circular dependency between "'+entityName+'" and "'+argDefs[i].entity+'".');if(argDefs[i].entity==entityName)throw depError;entityDef=this.definitions[argDefs[i].entity];if(entityDef.ctorArgs)for(var j=0;j<entityDef.ctorArgs.length;j++)if(entityDef.ctorArgs[j].entity==entityName)throw depError;if(entityDef.factory&&entityDef.factory.context==entityName)throw depError}args.push(this.parseProperty(argDefs[i]))}return context?ret=ctor.apply(context,args):(entity.prototype=ctor.prototype,inst=new entity,ret=ctor.apply(inst,args)||inst),ret},applyProperties:function(entity,propertyDefinitions){if(propertyDefinitions)for(var prop in propertyDefinitions)propertyDefinitions.hasOwnProperty(prop)&&(entity[prop]=this.parseProperty(propertyDefinitions[prop]))},parseProperty:function(propDef){var propError=new Error("Hypo Error: Invalid property or ctor argument definition."),ret;if(!propDef)throw propError;if(propDef.hasOwnProperty("hypo"))ret=this;else if(propDef.hasOwnProperty("entity"))ret=this.getEntity(propDef.entity);else{if(!propDef.hasOwnProperty("value"))throw propError;ret=propDef.value}return ret},parseDefinition:function(name){var def=this.definitions[name],key;if(!def)throw'Hypo Error: Invalid entity name + "'+name+'".';if(def.parent&&!def.parsed){parent=this.parseDefinition(def.parent);for(key in parent)key!="abstract"&&parent.hasOwnProperty(key)&&!def.hasOwnProperty(key)&&(def[key]=parent[key])}return def.parsed=!0,def}},Hypo})}(typeof define=="function"&&define.amd?define:typeof module!="undefined"&&module.exports?function(id,factory){module.exports=factory()}:function(id,factory){window[id]=factory()})